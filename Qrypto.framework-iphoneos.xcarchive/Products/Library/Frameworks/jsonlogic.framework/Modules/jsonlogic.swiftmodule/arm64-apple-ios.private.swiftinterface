// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name jsonlogic
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import JSON
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import jsonlogic
public enum JSONLogicError : Swift.Error, Swift.Equatable {
  public static func == (lhs: jsonlogic.JSONLogicError, rhs: jsonlogic.JSONLogicError) -> Swift.Bool
  case canNotParseJSONData(Swift.String)
  case canNotParseJSONRule(Swift.String)
  case canNotConvertResultToType(any Any.Type)
}
public func applyRule<T>(_ jsonRule: Swift.String, to jsonDataOrNil: Swift.String? = nil) throws -> T
final public class JsonLogic {
  convenience public init(_ jsonRule: Swift.String) throws
  public init(_ jsonRule: Swift.String, customOperators: [Swift.String : (JSON.JSON?) -> JSON.JSON]?) throws
  final public func applyRule<T>(to jsonDataOrNil: Swift.String? = nil) throws -> T
  @objc deinit
}
public enum ParseError : Swift.Error, Swift.Equatable {
  case UnimplementedExpressionFor(_: Swift.String)
  case GenericError(Swift.String)
  public static func == (a: jsonlogic.ParseError, b: jsonlogic.ParseError) -> Swift.Bool
}
