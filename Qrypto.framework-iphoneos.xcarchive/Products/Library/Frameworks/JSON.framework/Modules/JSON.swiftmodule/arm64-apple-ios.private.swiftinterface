// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name JSON
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import JSON
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum JSON : Swift.Equatable {
  case Null
  case Array([JSON.JSON])
  case Dictionary([Swift.String : JSON.JSON])
  case Int(Swift.Int64)
  case Double(Swift.Double)
  case String(Swift.String)
  case Bool(Swift.Bool)
  case Error(JSON.JSON.JSON2Error)
  public enum ContentType {
    case error, null, bool, number, string, array, object
    public static func == (a: JSON.JSON.ContentType, b: JSON.JSON.ContentType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var type: JSON.JSON.ContentType {
    get
  }
  public enum JSON2Error : Swift.Error, Swift.Equatable, Swift.Hashable {
    case failedToParse
    case notJSONValue
    case indexOutOfRange(Swift.Int)
    case keyNotFound(Swift.String)
    case notSubscriptableType(JSON.JSON.ContentType)
    case NSError(Foundation.NSError)
    public static func == (a: JSON.JSON.JSON2Error, b: JSON.JSON.JSON2Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init()
  public init(_ array: [JSON.JSON])
  public init(_ dictionary: [Swift.String : JSON.JSON])
  public init(_ json: Any)
  public init(_ data: Foundation.Data)
  public init?(string: Swift.String, encoding: Swift.String.Encoding = .utf8)
  public static func === (lhs: JSON.JSON, rhs: JSON.JSON) -> Swift.Bool
  public static func !== (lhs: JSON.JSON, rhs: JSON.JSON) -> Swift.Bool
  public static func == (lhs: JSON.JSON, rhs: JSON.JSON) -> Swift.Bool
  public static func + (lhs: JSON.JSON, rhs: JSON.JSON) -> JSON.JSON
  prefix public static func - (json: JSON.JSON) -> JSON.JSON
  public static func - (lhs: JSON.JSON, rhs: JSON.JSON) -> JSON.JSON
  public static func * (lhs: JSON.JSON, rhs: JSON.JSON) -> JSON.JSON
  public static func / (lhs: JSON.JSON, rhs: JSON.JSON) -> JSON.JSON
  public static func % (lhs: JSON.JSON, rhs: JSON.JSON) -> JSON.JSON
  public var bool: Swift.Bool? {
    get
  }
  public var int: Swift.Int64? {
    get
  }
  public var double: Swift.Double? {
    get
  }
  public var string: Swift.String? {
    get
  }
  public var array: [JSON.JSON]? {
    get
  }
  public var dictionary: [Swift.String : JSON.JSON]? {
    get
  }
}
extension JSON.JSON : Swift.Comparable {
  public static func < (lhs: JSON.JSON, rhs: JSON.JSON) -> Swift.Bool
  public static func > (lhs: JSON.JSON, rhs: JSON.JSON) -> Swift.Bool
  public static func >= (lhs: JSON.JSON, rhs: JSON.JSON) -> Swift.Bool
  public static func <= (lhs: JSON.JSON, rhs: JSON.JSON) -> Swift.Bool
}
extension JSON.JSON : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension JSON.JSON : Swift.ExpressibleByIntegerLiteral, Swift.ExpressibleByArrayLiteral, Swift.ExpressibleByBooleanLiteral, Swift.ExpressibleByNilLiteral, Swift.ExpressibleByStringLiteral, Swift.ExpressibleByDictionaryLiteral, Swift.ExpressibleByFloatLiteral {
  public init(stringLiteral value: Swift.String)
  public init(nilLiteral: ())
  public init(arrayLiteral elements: Swift.Int...)
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public init(dictionaryLiteral value: (Swift.String, JSON.JSON)...)
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public init(floatLiteral value: Swift.Double)
  public typealias ArrayLiteralElement = Swift.Int
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias FloatLiteralType = Swift.Double
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
  public typealias Key = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
  public typealias Value = JSON.JSON
}
extension JSON.JSON {
  public subscript(idx: Swift.Int) -> JSON.JSON {
    get
    set
  }
  public subscript(key: JSON.JSON.Key) -> JSON.JSON {
    get
    set
  }
}
extension JSON.JSON {
  public func truthy() -> Swift.Bool
}
extension JSON.JSON {
  public func toNumber() -> JSON.JSON
}
extension JSON.JSON.ContentType : Swift.Equatable {}
extension JSON.JSON.ContentType : Swift.Hashable {}
