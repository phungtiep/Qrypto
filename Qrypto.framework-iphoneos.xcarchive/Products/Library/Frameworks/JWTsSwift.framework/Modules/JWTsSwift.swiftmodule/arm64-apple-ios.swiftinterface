// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name JWTsSwift
import CommonCrypto
import Foundation
@_exported import JWTsSwift
import Swift
import _Concurrency
import secp256k1_swift
public enum SignatureAlgorithm : Swift.String {
  case ES256K
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Foundation.Data {
  public init?(base64UrlEncoded: Swift.String)
  public func base64UrlEncoding() -> Swift.String
}
public class ECDSASigner : JWTsSwift.JWSSigner {
  public init(privateKey: Foundation.Data)
  public func sign(header: JWTsSwift.JWSHeader, signingInput: Foundation.Data) throws -> Foundation.Data
  @objc deinit
}
public class ECDSAVerifier : JWTsSwift.JWSVerifier {
  public init(publicKey: Foundation.Data)
  public func verify(header: JWTsSwift.JWSHeader, signedContent: Foundation.Data, signature: Foundation.Data) throws -> Swift.Bool
  @objc deinit
}
public class JOSEHeader {
  public var parameters: [Swift.String : Any]
  public init()
  public init(parameters: [Swift.String : Any]) throws
  public init(headerData: Foundation.Data) throws
  public var jku: Foundation.URL? {
    get
    set
  }
  public var jwk: Swift.String? {
    get
    set
  }
  public var kid: Swift.String? {
    get
    set
  }
  public var x5u: Foundation.URL? {
    get
    set
  }
  public var x5c: [Swift.String]? {
    get
    set
  }
  public var x5t: Swift.String? {
    get
    set
  }
  public var x5tS256: Swift.String? {
    get
    set
  }
  public var typ: Swift.String? {
    get
    set
  }
  public var cty: Swift.String? {
    get
    set
  }
  public var crit: [Swift.String]? {
    get
    set
  }
  public func base64() -> Swift.String?
  public func data() -> Foundation.Data?
  @objc deinit
}
public protocol JOSEObject {
  var payload: Foundation.Data { get set }
  func serialize() throws -> Swift.String
}
public class JWSHeader : JWTsSwift.JOSEHeader {
  override public init(parameters: [Swift.String : Any]) throws
  override public init(headerData: Foundation.Data) throws
  convenience public init(algorithm: JWTsSwift.SignatureAlgorithm)
  public var alg: Swift.String {
    get
    set
  }
  @objc deinit
}
public class JWSObject : JWTsSwift.JOSEObject {
  public var header: JWTsSwift.JWSHeader
  public var payload: Foundation.Data
  public var signature: Foundation.Data?
  public var signingInput: Foundation.Data
  public init(header: JWTsSwift.JWSHeader, payload: Foundation.Data)
  public init(string: Swift.String) throws
  public func serialize() throws -> Swift.String
  public func serialize(detachedPayload: Swift.Bool) throws -> Swift.String
  public func sign(signer: JWTsSwift.JWSSigner) throws
  public func verify(verifier: JWTsSwift.JWSVerifier) throws -> Swift.Bool
  @objc deinit
}
public protocol JWSSigner {
  func sign(header: JWTsSwift.JWSHeader, signingInput: Foundation.Data) throws -> Foundation.Data
}
public protocol JWSVerifier {
  func verify(header: JWTsSwift.JWSHeader, signedContent: Foundation.Data, signature: Foundation.Data) throws -> Swift.Bool
}
public class JWT {
  public var claims: [Swift.String : Any]
  public init(claims: [Swift.String : Any])
  convenience public init()
  convenience public init(base64EncodedJson: Swift.String) throws
  convenience public init(jsonString: Swift.String) throws
  convenience public init(jsonData: Foundation.Data) throws
  public var issuer: Foundation.URL? {
    get
    set
  }
  public var subject: Swift.String? {
    get
    set
  }
  public var audience: [Swift.String]? {
    get
    set
  }
  public var expirationTime: Foundation.Date? {
    get
    set
  }
  public var notBeforeTime: Foundation.Date? {
    get
    set
  }
  public var issuedAt: Foundation.Date? {
    get
    set
  }
  public var jwtID: Swift.String? {
    get
    set
  }
  public func setAudience(audience: Swift.String)
  public func base64() throws -> Swift.String
  public func data() throws -> Foundation.Data
  @objc deinit
}
extension secp256k1_swift.SECP256K1 {
  public static func ecdsaSign(hash: Foundation.Data, privateKey: Foundation.Data, useExtraEntropy: Swift.Bool = false) -> (serializedSignature: Foundation.Data?, rawSignature: Foundation.Data?)
  public static func ecdsaVerify(hash: Foundation.Data, signature: Foundation.Data, publicKey: Foundation.Data) -> Swift.Bool
}
extension JWTsSwift.SignatureAlgorithm : Swift.Equatable {}
extension JWTsSwift.SignatureAlgorithm : Swift.Hashable {}
extension JWTsSwift.SignatureAlgorithm : Swift.RawRepresentable {}
